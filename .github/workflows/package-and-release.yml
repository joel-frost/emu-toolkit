name: Build & Release

on:
  push:
    branches:
      - 'release/**'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven

      - name: Build with Maven
        run: mvn clean package

      - name: Extract version
        id: version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Prepare Artifacts
        run: |
          mkdir artifacts
          cp target/*.jar artifacts/romscraper-${{ env.VERSION }}.jar

          # Find the runnable folder (which starts with the app name)
          bundle_dir=$(find target/runnables -maxdepth 1 -type d -name "RomScraper*")

          if [[ "$RUNNER_OS" == "Linux" ]]; then
            zip -r artifacts/romscraper-${{ env.VERSION }}-linux.zip "$bundle_dir"
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
            7z a artifacts/romscraper-${{ env.VERSION }}-windows.zip "$bundle_dir"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            ditto -c -k --sequesterRsrc --keepParent "$bundle_dir" artifacts/romscraper-${{ env.VERSION }}-macos.zip
          fi

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: romscraper-${{ runner.os }}
          path: artifacts/

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded/

      - name: Extract version
        id: version
        run: echo "VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_ENV

      - name: Generate Changelog
        id: changelog
        run: |
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            LOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s")
          else
            LOG=$(git log --pretty=format:"- %s")
          fi
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$LOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create GitLab Release
        env:
          GITLAB_TOKEN: ${{ secrets.GITLAB_TOKEN }}
        run: |
          PROJECT_ID=<YOUR_PROJECT_ID> # <- replace this with your GitLab numeric project ID

          # Create release
          curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
               --data "name=Release $VERSION" \
               --data "tag_name=$VERSION" \
               --data-urlencode "description=${{ env.CHANGELOG }}" \
               --request POST "https://gitlab.com/api/v4/projects/${PROJECT_ID}/releases"

          # Upload files
          for f in downloaded/**; do
            [ -f "$f" ] && curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
              --upload-file "$f" \
              "https://gitlab.com/api/v4/projects/${PROJECT_ID}/uploads"
          done

      - name: Bump version
        run: |
          CURRENT=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          BASE=$(echo $CURRENT | awk -F. '{print $1 "." $2}')
          PATCH=$(echo $CURRENT | awk -F. '{print $3 + 1}')
          NEW_VERSION="${BASE}.${PATCH}-SNAPSHOT"

          mvn versions:set -DnewVersion=$NEW_VERSION
          mvn versions:commit
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -am "Bump version to $NEW_VERSION"
          git push
