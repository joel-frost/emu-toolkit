name: Build and Release

on:
  push:
    branches:
      - 'releases/**'

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      release_title: ${{ steps.set-version.outputs.release_title }}
      changelog: ${{ steps.set-version.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Get previous version
        id: get-version
        run: |
          CURRENT_VERSION=$(grep -o '<version>.*</version>' pom.xml | head -1 | sed 's/<version>\(.*\)<\/version>/\1/')
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Increment version
        id: set-version
        run: |
          CURRENT_VERSION=${{ steps.get-version.outputs.current_version }}
          
          # Remove SNAPSHOT if present
          VERSION_BASE=${CURRENT_VERSION/-SNAPSHOT/}
          
          # Extract version components, handling various formats (x.y, x.y.z)
          IFS='.' read -r -a VERSION_PARTS <<< "$VERSION_BASE"
          
          # Determine number of parts
          NUM_PARTS=${#VERSION_PARTS[@]}
          
          # Handle different version formats
          if [ "$NUM_PARTS" -eq 2 ]; then
            # Format is x.y (e.g., 1.0, 2.0, 1.2)
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
          
            # If we're at x.0, start with x.0.1
            if [ "$MINOR" -eq 0 ]; then
              NEW_VERSION="$MAJOR.$MINOR.1"
            else
              # For other cases like 1.2, increment to 1.2.1
              NEW_VERSION="$MAJOR.$MINOR.1"
            fi
          elif [ "$NUM_PARTS" -eq 3 ]; then
            # Format is x.y.z (e.g., 1.0.1, 2.0.5)
            MAJOR="${VERSION_PARTS[0]}"
            MINOR="${VERSION_PARTS[1]}"
            PATCH="${VERSION_PARTS[2]}"
          
            # Increment patch version
            NEW_PATCH=$((PATCH + 1))
            NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          else
            # Handle unexpected formats
            echo "Unexpected version format: $VERSION_BASE"
            exit 1
          fi
          
          echo "Incrementing version from $VERSION_BASE to $NEW_VERSION"
          
          # Update POM file
          sed -i "s/<version>$CURRENT_VERSION<\/version>/<version>$NEW_VERSION<\/version>/" pom.xml
          
          # Get commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s")
          fi
          
          # Store version and changelog
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_title=v$NEW_VERSION" >> $GITHUB_OUTPUT
          
          # Create a properly escaped changelog for output
          CHANGELOG_ESCAPED="${CHANGELOG//'%'/'%25'}"
          CHANGELOG_ESCAPED="${CHANGELOG_ESCAPED//$'\n'/'%0A'}"
          CHANGELOG_ESCAPED="${CHANGELOG_ESCAPED//$'\r'/'%0D'}"
          echo "changelog=$CHANGELOG_ESCAPED" >> $GITHUB_OUTPUT
          
          # Also set as env variable for the current job
          echo "changelog<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit and push updated version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pom.xml
          git commit -m "Update version to ${{ env.NEW_VERSION }}"
          git tag "v${{ env.NEW_VERSION }}"
          git push
          git push --tags

  build-jar:
    needs: update-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/tags/v${{ needs.update-version.outputs.version }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: target/*.jar

  build-windows:
    needs: [update-version, build-jar]
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/tags/v${{ needs.update-version.outputs.version }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Windows executable
        run: |
          mvn clean package -DskipTests
          
          # Use PowerShell commands for Windows
          if (!(Test-Path -Path "target\jpackage-input\lib")) {
            New-Item -Path "target\jpackage-input\lib" -ItemType Directory -Force
          }
          
          Copy-Item -Path "target\*.jar" -Destination "target\jpackage-input" -Force
          Copy-Item -Path "target\lib\*" -Destination "target\jpackage-input\lib" -Force
          
          # Get the main JAR file
          $mainJar = Get-ChildItem -Path "target" -Filter "*.jar" | Where-Object { !$_.Name.Contains("sources") -and !$_.Name.Contains("javadoc") } | Select-Object -ExpandProperty Name -Last 1
          
          # Use jpackage directly
          jpackage --name RomScraper `
            --app-version ${{ needs.update-version.outputs.version }} `
            --input target\jpackage-input `
            --dest target\dist `
            --main-jar $mainJar `
            --main-class com.rom.scraper.Launcher `
            --type app-image
          
          echo "Listing jpackage output directory contents:"
          Get-ChildItem -Path "target\dist" -Recurse | Format-Table -Property FullName

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: target/dist
          if-no-files-found: error

  build-macos:
    needs: [update-version, build-jar]
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/tags/v${{ needs.update-version.outputs.version }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build macOS app
        run: |
          mvn clean package -DskipTests
          mkdir -p target/jpackage-input/lib
          cp target/*.jar target/jpackage-input/
          cp target/lib/* target/jpackage-input/lib/
          
          # Use jpackage directly
          MAIN_JAR=$(find target -maxdepth 1 -name "*.jar" | head -1 | xargs basename)
          jpackage --name RomScraper \
            --app-version ${{ needs.update-version.outputs.version }} \
            --input target/jpackage-input \
            --dest target/dist \
            --main-jar $MAIN_JAR \
            --main-class com.rom.scraper.Launcher \
            --type app-image
          
          echo "Listing jpackage output directory contents:"
          find target/dist -type f -o -type d | sort

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: target/dist
          if-no-files-found: error

  build-linux:
    needs: [update-version, build-jar]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: refs/tags/v${{ needs.update-version.outputs.version }}

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Linux package
        run: |
          mvn clean package -DskipTests
          mkdir -p target/jpackage-input/lib
          cp target/*.jar target/jpackage-input/
          cp target/lib/* target/jpackage-input/lib/
          
          # Use jpackage directly
          MAIN_JAR=$(find target -maxdepth 1 -name "*.jar" | head -1 | xargs basename)
          jpackage --name RomScraper \
            --app-version ${{ needs.update-version.outputs.version }} \
            --input target/jpackage-input \
            --dest target/dist \
            --main-jar $MAIN_JAR \
            --main-class com.rom.scraper.Launcher \
            --type app-image
          
          echo "Listing jpackage output directory contents:"
          find target/dist -type f -o -type d | sort

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: target/dist
          if-no-files-found: error

  create-release:
    needs: [update-version, build-jar, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug - List artifact contents
        run: |
          echo "Listing all downloaded artifacts:"
          find artifacts -type f | sort
          find artifacts -type d | sort

      - name: Rename and package artifacts with version
        run: |
          VERSION="${{ needs.update-version.outputs.version }}"
          mkdir -p release-files
          
          echo "Packaging JAR files..."
          find artifacts/jar-artifact -name "*.jar" -exec cp {} release-files/rom-scraper-${VERSION}.jar \;
          
          echo "Packaging Windows executable..."
          if [ -d "artifacts/windows-artifact" ]; then
            cd artifacts/windows-artifact
            ls -la
            if [ -d "RomScraper" ]; then
              echo "Found Windows RomScraper directory, zipping..."
              zip -r ../../release-files/RomScraper-${VERSION}-windows.zip RomScraper
            else
              echo "Windows RomScraper directory not found"
              # Try to find it in case the path is different
              find . -type d -name "RomScraper*" | xargs -I{} zip -r ../../release-files/RomScraper-${VERSION}-windows.zip {}
            fi
            cd ../..
          fi
          
          echo "Packaging macOS app..."
          if [ -d "artifacts/macos-artifact" ]; then
            cd artifacts/macos-artifact
            ls -la
            if [ -d "RomScraper.app" ]; then
              echo "Found macOS RomScraper.app directory, zipping..."
              zip -r ../../release-files/RomScraper-${VERSION}-macos.zip RomScraper.app
            else
              echo "macOS RomScraper.app directory not found"
              # Try to find it in case the path is different
              find . -type d -name "*.app" | xargs -I{} zip -r ../../release-files/RomScraper-${VERSION}-macos.zip {}
            fi
            cd ../..
          fi
          
          echo "Packaging Linux executable..."
          if [ -d "artifacts/linux-artifact" ]; then
            cd artifacts/linux-artifact
            ls -la
            if [ -d "RomScraper" ]; then
              echo "Found Linux RomScraper directory, creating tar.gz..."
              tar -czf ../../release-files/RomScraper-${VERSION}-linux.tar.gz RomScraper
            else
              echo "Linux RomScraper directory not found"
              # Try to find it in case the path is different
              find . -type d -name "RomScraper*" | xargs -I{} tar -czf ../../release-files/RomScraper-${VERSION}-linux.tar.gz {}
            fi
            cd ../..
          fi
          
          echo "Contents of release-files directory:"
          ls -la release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.update-version.outputs.version }}
          name: ${{ needs.update-version.outputs.release_title }}
          body: ${{ needs.update-version.outputs.changelog }}
          files: release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}