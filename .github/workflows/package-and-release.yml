name: Build and Release

on:
  push:
    branches:
      - 'releases/**'

jobs:
  update-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-version.outputs.version }}
      release_title: ${{ steps.set-version.outputs.release_title }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Get previous version
        id: get-version
        run: |
          CURRENT_VERSION=$(grep -o '<version>.*</version>' pom.xml | head -1 | sed 's/<version>\(.*\)<\/version>/\1/')
          echo "Current version: $CURRENT_VERSION"
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: Increment version
        id: set-version
        run: |
          CURRENT_VERSION=${{ steps.get-version.outputs.current_version }}
          
          # Remove SNAPSHOT if present
          VERSION_BASE=${CURRENT_VERSION/-SNAPSHOT/}
          
          # Split version
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION_BASE"
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          # Update POM file
          sed -i "s/<version>$CURRENT_VERSION<\/version>/<version>$NEW_VERSION<\/version>/" pom.xml
          
          # Get commit messages since last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $LAST_TAG..HEAD)
          else
            CHANGELOG=$(git log --pretty=format:"- %s")
          fi
          
          # Store version and changelog
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "release_title=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "changelog<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Commit and push updated version
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pom.xml
          git commit -m "Update version to ${{ env.NEW_VERSION }}"
          git tag "v${{ env.NEW_VERSION }}"
          git push
          git push --tags

  build-jar:
    needs: update-version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: refs/tags/v${{ needs.update-version.outputs.version }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build JAR
        run: mvn clean package -DskipTests

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar-artifact
          path: target/*.jar

  build-windows:
    needs: [update-version, build-jar]
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: refs/tags/v${{ needs.update-version.outputs.version }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Windows executable
        run: |
          mvn clean package -DskipTests
          mvn org.panteleyev:jpackage-maven-plugin:jpackage -Djpackage.type=app-image

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-artifact
          path: target/dist/RomScraper

  build-macos:
    needs: [update-version, build-jar]
    runs-on: macos-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: refs/tags/v${{ needs.update-version.outputs.version }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build macOS app
        run: |
          mvn clean package -DskipTests
          mvn org.panteleyev:jpackage-maven-plugin:jpackage -Djpackage.type=app-image

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v3
        with:
          name: macos-artifact
          path: target/dist/RomScraper.app

  build-linux:
    needs: [update-version, build-jar]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: refs/tags/v${{ needs.update-version.outputs.version }}

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build Linux package
        run: |
          mvn clean package -DskipTests
          mvn org.panteleyev:jpackage-maven-plugin:jpackage -Djpackage.type=app-image

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-artifact
          path: target/dist/RomScraper

  create-release:
    needs: [update-version, build-jar, build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Rename artifacts with version
        run: |
          VERSION="${{ needs.update-version.outputs.version }}"
          mkdir -p release-files
          
          # Rename JAR
          find artifacts/jar-artifact -name "*.jar" -exec cp {} release-files/rom-scraper-${VERSION}.jar \;
          
          # Package Windows executable
          if [ -d "artifacts/windows-artifact/RomScraper" ]; then
            cd artifacts/windows-artifact
            zip -r ../../release-files/RomScraper-${VERSION}-windows.zip RomScraper
            cd ../..
          fi
          
          # Package macOS app
          if [ -d "artifacts/macos-artifact/RomScraper.app" ]; then
            cd artifacts/macos-artifact
            zip -r ../../release-files/RomScraper-${VERSION}-macos.zip RomScraper.app
            cd ../..
          fi
          
          # Package Linux executable
          if [ -d "artifacts/linux-artifact/RomScraper" ]; then
            cd artifacts/linux-artifact
            tar -czf ../../release-files/RomScraper-${VERSION}-linux.tar.gz RomScraper
            cd ../..
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.update-version.outputs.version }}
          name: ${{ needs.update-version.outputs.release_title }}
          body: ${{ env.CHANGELOG }}
          files: release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}