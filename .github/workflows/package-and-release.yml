name: Build, Package, and Release Runnable Executables

on:
  push:
    branches:
      - releases/** # Trigger only for branches under /releases/

jobs:
  build-and-package:
    name: Build Runnable Executables for Windows, macOS, and Linux
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java environment
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'

      # Step 3: Auto-increment project version
      - name: Auto-increment project version
        run: |
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"
          # Increment the patch version
          NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF+=1; print $1"."$2"."$NF}')
          echo "Next version: $NEXT_VERSION"
          mvn versions:set -DnewVersion=$NEXT_VERSION
          mvn versions:commit

      # Step 4: Build the application
      - name: Build the project
        run: mvn clean package

      # Step 5: Build and package runnable executables with jpackage
      - name: Package with jpackage
        run: |
          mkdir -p build/runnables
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            jpackage --type app-image --input target/ --dest build/runnables \
              --name RomScraper --main-jar target/$(ls target | grep '.jar$') \
              --main-class com.rom.scraper.Launcher
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            jpackage --type app-image --input target/ --dest build/runnables \
              --name RomScraper --main-jar target/$(ls target | grep '.jar$') \
              --main-class com.rom.scraper.Launcher
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            jpackage --type app-image --input target/ --dest build/runnables \
              --name RomScraper --main-jar target/$(ls target | grep '.jar$') \
              --main-class com.rom.scraper.Launcher
          fi

      # Step 6: Upload runnable artifacts
      - name: Upload runnable executables
        uses: actions/upload-artifact@v4
        with:
          name: runnables-${{ matrix.os }}
          path: build/runnables/

  release:
    name: Create GitHub Release
    needs: build-and-package
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Generate release description based on commits
      - name: Generate release description
        id: generate_description
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 $(git rev-list --tags --max-count=1))
          echo "Previous tag: $PREVIOUS_TAG"
          COMMITS=$(git log $PREVIOUS_TAG..HEAD --oneline)
          echo "Commits: $COMMITS"
          echo "description=$COMMITS" >> $GITHUB_ENV

      # Step 3: Create GitHub release with runnable executables and .jar
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          body: |
            ## Changes since last release:
            ${{ env.description }}
          tag_name: ${{ github.ref_name }}
          files: |
            build/runnables/*
            target/$(ls target | grep '.jar$')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}